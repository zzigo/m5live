{"file":"logs-CRbZfWqF.js","mappings":";;;;;;;;;;;;;;;;;;AASA,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,QAAQ,IAAI,IAAI;AACtB,UAAMA,QAAO,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;","names":["logs"],"sources":["../../../../pages/logs.vue"],"sourcesContent":["<template>\n  <div class=\"logs-container\">\n    <div v-if=\"loading\" class=\"loading\">Loading logs...</div>\n    <div v-else-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-else v-html=\"logs\" class=\"logs-content\"></div>\n  </div>\n</template>\n\n<script setup>\nconst loading = ref(true);\nconst error = ref(null);\nconst logs = ref(\"\");\n\nconst config = useRuntimeConfig();\n\nonMounted(async () => {\n  try {\n    const response = await fetch(\n      `${config.public.apiBase.replace(\"/api\", \"\")}/log`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    logs.value = await response.text();\n  } catch (e) {\n    error.value = `Failed to load logs: ${e.message}`;\n    console.error(\"Error loading logs:\", e);\n  } finally {\n    loading.value = false;\n  }\n});\n</script>\n\n<style scoped>\n.logs-container {\n  padding: 20px;\n}\n\n.loading {\n  text-align: center;\n  padding: 20px;\n  font-style: italic;\n}\n\n.error {\n  color: red;\n  padding: 20px;\n  text-align: center;\n}\n\n.logs-content {\n  /* Styles will come from the HTML returned by the backend */\n}\n</style>\n"],"version":3}