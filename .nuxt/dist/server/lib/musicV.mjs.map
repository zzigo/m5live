{"version":3,"file":"musicV.mjs","sources":["../../../../lib/musicV.ts"],"sourcesContent":["/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\ndeclare global {\n  interface Window {\n    AudioContext: typeof AudioContext;\n    AudioWorkletNode: typeof AudioWorkletNode;\n  }\n}\n\ninterface Note {\n  startTime: number;\n  duration: number;\n  frequency: number;\n  amplitude: number;\n  instrument: MusicVInstrument;\n  p6?: number;\n  p7?: number;\n  p8?: number;\n  p29?: number;\n  p30?: number;\n  oscState?: { sum: number };\n  envState?: { time: number };\n}\n\ninterface MusicVInstrument {\n  id: number;\n  units: { type: string; params: any }[];\n  oscillators: any[];\n  outputs: any[];\n  [key: string]: any;\n}\n\ninterface FunctionTable {\n  functionNum: number;\n  data: number[];\n}\n\ninterface Event {\n  type: string;\n  time: number;\n  insNum?: number;\n  frequency?: number;\n  amplitude?: number;\n  duration?: number;\n  p6?: number;\n  p7?: number;\n  p8?: number;\n  p29?: number;\n  p30?: number;\n}\n\nexport class MusicV {\n  private sampleRate: number = 44100;\n  private parameters: Float32Array = new Float32Array(1000);\n  private events: Event[] = [];\n  private currentTime: number = 0;\n  private instruments: Map<number, MusicVInstrument> = new Map();\n  private functions: Map<number, Float32Array> = new Map();\n  private currentInstrument: MusicVInstrument | null = null;\n  private audioContext: globalThis.AudioContext | null = null;\n  private workletNode: globalThis.AudioWorkletNode | null = null;\n  private consoleOutput: string = '';\n  private isServer: boolean = typeof globalThis.window === 'undefined';\n  private activeNotes: Map<number, Note> = new Map();\n  private pass2Report: string[] = [];\n  private globalVars: Map<number, number> = new Map();\n\n  constructor() {\n    this.initDefaultFunctionTables();\n    if (!this.isServer) {\n      this.setupKeyboardShortcuts();\n    }\n  }\n\n  private initDefaultFunctionTables(): void {\n    const sineWave = new Float32Array(512);\n    for (let i = 0; i < 512; i++) {\n      sineWave[i] = Math.sin(2 * Math.PI * i / 512);\n    }\n    this.functions.set(2, sineWave);\n\n    const straightLine = new Float32Array(512);\n    for (let i = 0; i < 512; i++) {\n      straightLine[i] = i / 512;\n    }\n    this.functions.set(1, straightLine);\n  }\n\n  private setupKeyboardShortcuts(): void {\n    document.addEventListener('keydown', (event) => {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const stopKey = isMac ? (event.metaKey && event.key === '.') : (event.ctrlKey && event.key === '.');\n      if (stopKey) {\n        event.preventDefault(); // Prevent browser default behavior\n        this.stopAndReset();\n      }\n    });\n  }\n\n  private stopAndReset(): void {\n    try {\n      if (this.audioContext) {\n        if (this.workletNode) {\n          this.workletNode.port.postMessage({ type: 'stop' });\n          this.workletNode.disconnect();\n          this.workletNode = null;\n        }\n        this.audioContext.suspend().then(() => {\n          this.audioContext!.close();\n          this.audioContext = null;\n          this.activeNotes.clear();\n          this.events = [];\n          this.currentTime = 0;\n          this.consoleOutput = '';\n          console.clear(); // Clear browser console\n          console.log('MusicV stopped and reset via Command+./Ctrl+.');\n          this.consoleOutput += 'MusicV stopped and reset\\n';\n        });\n      } else {\n        this.activeNotes.clear();\n        this.events = [];\n        this.currentTime = 0;\n        this.consoleOutput = '';\n        console.clear();\n        console.log('MusicV reset (no audio context active)');\n        this.consoleOutput += 'MusicV reset\\n';\n      }\n    } catch (error: any) {\n      console.error('Error during stop and reset:', error);\n      this.consoleOutput += `Error during stop and reset: ${error.message}\\n`;\n    }\n  }\n\n  parseScore(scoreText: string): void {\n    this.consoleOutput = '*** MUSIC V SCORE PROCESSING ***\\n\\n';\n    this.events = [];\n    this.instruments.clear();\n    this.pass2Report = [];\n    this.activeNotes.clear();\n    this.globalVars.clear();\n\n    const lines = scoreText.split('\\n');\n    let currentInstrumentId = -1;\n    const instrumentUnitCounts = new Map<number, number>();\n\n    for (const line of lines) {\n      if (!line.trim() || line.trim().startsWith(';')) continue;\n      if (line.trim().startsWith('COM') || line.trim().startsWith('COMMENT')) {\n        this.consoleOutput += `Comment: ${line.trim().substring(line.indexOf(' ') + 1)}\\n`;\n        continue;\n      }\n\n      const parts = line.trim().split(/\\s+/);\n      const opcode = parts[0];\n      const formattedLine = `${opcode.padEnd(8)}${parts.slice(1).map(p => p.padEnd(9, ' ')).join('')}`;\n      this.pass2Report.push(formattedLine);\n\n      switch (opcode) {\n        case 'INS':\n          if (this.currentInstrument) {\n            this.consoleOutput += `Instrument ${currentInstrumentId} definition complete\\n\\n`;\n            instrumentUnitCounts.set(currentInstrumentId, this.currentInstrument.units.length);\n            this.pass2Report.push(`       ${currentInstrumentId}    ${this.currentInstrument.units.length}.000    0.000`);\n          }\n          currentInstrumentId = parseInt(parts[1], 10);\n          this.currentInstrument = {\n            id: currentInstrumentId,\n            units: [],\n            oscillators: [],\n            outputs: []\n          };\n          this.instruments.set(currentInstrumentId, this.currentInstrument);\n          this.consoleOutput += `Defining Instrument ${currentInstrumentId}\\n`;\n          break;\n\n        case 'OSC':\n          if (this.currentInstrument) {\n            const freqParam = parts[1];\n            const ampParam = parts[2];\n            const outputBlock = parseInt(parts[3].substring(1), 10);\n            const functionNum = parseInt(parts[4].substring(1), 10);\n            const phaseParam = parts[5] || 'P30';\n            const oscId = this.currentInstrument.oscillators.length + 1;\n            this.currentInstrument.oscillators.push({\n              id: oscId,\n              type: 1,\n              freqParam,\n              ampParam,\n              outputBus: outputBlock,\n              functionTable: functionNum,\n              phaseParam\n            });\n            this.currentInstrument.units.push({\n              type: 'OSC',\n              params: { freqParam, ampParam, outputBlock, functionNum, phaseParam }\n            });\n            this.consoleOutput += `  OSC: Freq=${freqParam}, Amp=${ampParam}, Out=B${outputBlock}, Func=F${functionNum}, Phase=${phaseParam}\\n`;\n          }\n          break;\n\n        case 'OUT':\n          if (this.currentInstrument) {\n            const inputBlock = parseInt(parts[1].substring(1), 10);\n            const outputBlock = parseInt(parts[2].substring(1), 10);\n            this.currentInstrument.outputs.push({ inputBus: inputBlock, outputBus: outputBlock });\n            this.currentInstrument.units.push({\n              type: 'OUT',\n              params: { inputBlock, outputBlock, amplitude: 1.0 }\n            });\n            this.consoleOutput += `  OUT: In=B${inputBlock}, Out=B${outputBlock}, Amp=1\\n`;\n          }\n          break;\n\n        case 'AD2':\n          if (this.currentInstrument) {\n            const input1 = parts[1].startsWith('P') ? parts[1] : parseInt(parts[1].substring(1), 10);\n            const input2 = parts[2].startsWith('P') ? parts[2] : parseInt(parts[2].substring(1), 10);\n            const outputBlock = parseInt(parts[3].substring(1), 10);\n            this.currentInstrument.units.push({\n              type: 'AD2',\n              params: { input1, input2, outputBlock }\n            });\n            this.consoleOutput += `  AD2: In1=${input1}, In2=${input2}, Out=B${outputBlock}\\n`;\n          }\n          break;\n\n        case 'SET':\n          if (this.currentInstrument) {\n            const param = parts[1];\n            this.currentInstrument.units.push({\n              type: 'SET',\n              params: { param }\n            });\n            this.consoleOutput += `  SET: Param=${param}\\n`;\n          }\n          break;\n\n        case 'MLT':\n          if (this.currentInstrument) {\n            const input1 = parts[1].startsWith('P') ? parts[1] : parseInt(parts[1].substring(1), 10);\n            const input2 = parts[2].startsWith('P') ? parts[2] : parseInt(parts[2].substring(1), 10);\n            const outputBlock = parseInt(parts[3].substring(1), 10);\n            this.currentInstrument.units.push({\n              type: 'MLT',\n              params: { input1, input2, outputBlock }\n            });\n            this.consoleOutput += `  MLT: In1=${input1}, In2=${input2}, Out=B${outputBlock}\\n`;\n          }\n          break;\n\n        case 'ENV':\n          if (this.currentInstrument) {\n            const ampParam = parts[1];\n            const durParam = parts[2];\n            const outputBlock = parseInt(parts[3].substring(1), 10);\n            const functionNum = parseInt(parts[4].substring(1), 10);\n            const phaseParam = parts[5] || 'P30';\n            this.currentInstrument.units.push({\n              type: 'ENV',\n              params: { ampParam, durParam, outputBlock, functionNum, phaseParam }\n            });\n            this.consoleOutput += `  ENV: Amp=${ampParam}, Dur=${durParam}, Out=B${outputBlock}, Func=F${functionNum}, Phase=${phaseParam}\\n`;\n          }\n          break;\n\n        case 'SIA':\n          const siaTime = parseFloat(parts[1]);\n          const varNum = parseInt(parts[2], 10);\n          const value = parseInt(parts[3], 10);\n          this.globalVars.set(varNum, value);\n          if (varNum === 4) this.sampleRate = value;\n          this.events.push({ type: 'sia', time: siaTime, varNum, value });\n          this.consoleOutput += `SIA: Time=${siaTime}, Var=${varNum}, Value=${value} (SampleRate=${this.sampleRate})\\n`;\n          break;\n\n        case 'SV2':\n          const sv2Time = parseFloat(parts[1]);\n          const sv2VarNum = parseInt(parts[2], 10);\n          const sv2Value = parseFloat(parts[3]);\n          this.events.push({ type: 'sv2', time: sv2Time, varNum: sv2VarNum, value: sv2Value });\n          this.consoleOutput += `SV2: Time=${sv2Time}, Var=P${sv2VarNum}, Value=${sv2Value}\\n`;\n          break;\n\n        case 'END':\n          if (this.currentInstrument) {\n            this.consoleOutput += `Instrument ${currentInstrumentId} definition complete\\n\\n`;\n            instrumentUnitCounts.set(currentInstrumentId, this.currentInstrument.units.length);\n            this.currentInstrument = null;\n          }\n          break;\n\n        case 'GEN':\n          const functionNum = parseInt(parts[3], 10);\n          const params = parts.slice(4).map(p => parseFloat(p));\n          this.handleGenFunction(functionNum, parseInt(parts[1]), parseInt(parts[2]), params);\n          this.consoleOutput += `GEN: Function=${functionNum}, Params=${params.length}\\n`;\n          break;\n\n        case 'NOT':\n          const startTime = parseFloat(parts[1]);\n          const insNum = parseInt(parts[2], 10);\n          const amplitude = parseFloat(parts[3]);\n          const frequency = parseFloat(parts[4]);\n          const duration = parseFloat(parts[5]);\n          const p6 = parts[6] ? parseFloat(parts[6]) : undefined;\n          const p7 = parts[7] ? parseFloat(parts[7]) : undefined;\n          const p8 = parts[8] ? parseFloat(parts[8]) : undefined;\n          this.events.push({ \n            type: 'note', \n            time: startTime, \n            insNum, \n            frequency, \n            amplitude, \n            duration, \n            p6, \n            p7, \n            p8 \n          });\n          this.consoleOutput += `Note: Start=${startTime}, Ins=${insNum}, Amp=${amplitude}, Freq=${frequency}, Dur=${duration}${p6 ? `, P6=${p6}` : ''}${p7 ? `, P7=${p7}` : ''}${p8 ? `, P8=${p8}` : ''}\\n`;\n          console.log(`Added note event: Start=${startTime}, Ins=${insNum}, Amp=${amplitude}, Freq=${frequency}, Dur=${duration}`);\n          break;\n\n        case 'TER':\n          const terminationTime = parseFloat(parts[1]);\n          this.events.push({ type: 'termination', time: terminationTime });\n          this.consoleOutput += `Termination time: ${terminationTime}\\n\\n`;\n          console.log(`Added termination event at ${terminationTime}s`);\n          break;\n\n        case 'SV3': this.consoleOutput += `SV3: Set variable in Pass III (not implemented)\\n`; break;\n        case 'SEC': this.consoleOutput += `SEC: End section (not implemented)\\n`; break;\n        case 'SV1': this.consoleOutput += `SV1: Set variable in Pass I (not implemented)\\n`; break;\n        case 'PLF': this.consoleOutput += `PLF: Execute subroutine in Pass I (not implemented)\\n`; break;\n        case 'PLS': this.consoleOutput += `PLS: Execute subroutine in Pass II (not implemented)\\n`; break;\n        case 'SI3': this.consoleOutput += `SI3: Set integer in Pass III (not implemented)\\n`; break;\n        case 'RAN': this.consoleOutput += `RAN: Random generator (not implemented)\\n`; break;\n        case 'STR': this.consoleOutput += `STR: Stereo output (not implemented)\\n`; break;\n        case 'AD3': this.consoleOutput += `AD3: Three-input adder (not implemented)\\n`; break;\n        case 'AD4': this.consoleOutput += `AD4: Four-input adder (not implemented)\\n`; break;\n        case 'FLT': this.consoleOutput += `FLT: Filter (not implemented)\\n`; break;\n        case 'RAH': this.consoleOutput += `RAH: Random and hold (not implemented)\\n`; break;\n        case 'IOS': this.consoleOutput += `IOS: Interpolating oscillator (not implemented)\\n`; break;\n\n        default:\n          this.consoleOutput += `Unknown opcode: ${opcode} (skipped)\\n`;\n      }\n    }\n\n    this.events.sort((a, b) => a.time - b.time);\n    this.processPass2();\n  }\n\n  private processPass2(): void {\n    this.consoleOutput += '1PASS II REPORT\\n0(WORD CNT)\\n';\n    this.pass2Report.forEach(line => this.consoleOutput += `${line}\\n`);\n    this.instruments.forEach((instrument, id) => {\n      this.consoleOutput += `       ${id.toString().padStart(2)}    ${instrument.units.length.toFixed(3).padStart(6)}    0.000\\n`;\n    });\n\n    for (const event of this.events) {\n      if (event.type === 'sv2') {\n        const { time, varNum, value } = event;\n        for (const noteEvent of this.events) {\n          if (noteEvent.type === 'note' && noteEvent.time >= time) {\n            switch (varNum) {\n              case 5: noteEvent.frequency = value; break;\n              case 6: noteEvent.p6 = value; break;\n              case 7: noteEvent.p7 = value; break;\n              case 8: noteEvent.p8 = value; break;\n              default: this.consoleOutput += `SV2: Unsupported varNum P${varNum}\\n`; break;\n            }\n            this.consoleOutput += `SV2 applied at ${time}s: P${varNum}=${value} to note at ${noteEvent.time}s\\n`;\n          }\n        }\n      }\n    }\n\n    this.consoleOutput += 'END OF PASS II\\n\\nScore processing complete\\n';\n  }\n\n  private processOscillator(unit: any, note: Note, blocks: Map<number, Float32Array>, currentTime: number): void {\n    const { freqParam, ampParam, outputBlock, functionNum, phaseParam } = unit.params;\n    const frequency = freqParam.startsWith('B') ? (blocks.get(parseInt(freqParam.substring(1)))?.[0] || 0) : (note[freqParam.toLowerCase()] || note.frequency || 440);\n    const amplitude = ampParam.startsWith('B') ? (blocks.get(parseInt(ampParam.substring(1)))?.[0] || 0) : (note[ampParam.toLowerCase()] || note.amplitude || 0.5);\n    const functionData = this.functions.get(functionNum) || this.functions.get(2)!;\n    let output = blocks.get(outputBlock);\n    if (!output) {\n      output = new Float32Array(1);\n      blocks.set(outputBlock, output);\n    }\n    if (!note.oscState) {\n      const initialPhase = phaseParam.startsWith('P') ? (note[phaseParam.toLowerCase()] || 0) : 0;\n      note.oscState = { sum: initialPhase };\n    }\n    const tableSize = functionData.length;\n    const increment = frequency * tableSize / this.sampleRate;\n    note.oscState.sum += increment;\n    const index = Math.floor(note.oscState.sum % (tableSize - 1));\n    const value = functionData[index];\n    output[0] = value * amplitude;\n    if (freqParam.startsWith('B') && parseInt(freqParam.substring(1)) === outputBlock) {\n      output[0] *= 0.9;\n    }\n    if (currentTime < 0.01 || Math.random() < 0.01) {\n      console.log(`OSC at ${currentTime.toFixed(2)}s: Freq=${frequency.toFixed(2)}, Amp=${amplitude.toFixed(2)}, Value=${value.toFixed(6)}, Out=B${outputBlock}=${output[0].toFixed(6)}`);\n    }\n  }\n\n  private processOutput(unit: any, blocks: Map<number, Float32Array>): void {\n    const { inputBlock, outputBlock, amplitude } = unit.params;\n    const input = blocks.get(inputBlock)?.[0] || 0;\n    let output = blocks.get(outputBlock);\n    if (!output) {\n      output = new Float32Array(1);\n      blocks.set(outputBlock, output);\n    }\n    output[0] += input * amplitude;\n  }\n\n  private processAd2(unit: any, note: Note, blocks: Map<number, Float32Array>): void {\n    const { input1, input2, outputBlock } = unit.params;\n    const input1Value = typeof input1 === 'string' ? (note[input1.toLowerCase()] || 0) : (blocks.get(input1)?.[0] || 0);\n    const input2Value = typeof input2 === 'string' ? (note[input2.toLowerCase()] || 0) : (blocks.get(input2)?.[0] || 0);\n    const sum = input1Value + input2Value;\n    let output = blocks.get(outputBlock);\n    if (!output) {\n      output = new Float32Array(1);\n      blocks.set(outputBlock, output);\n    }\n    output[0] = sum;\n    console.log(`AD2: In1=${input1Value.toFixed(6)}, In2=${input2Value.toFixed(6)}, Sum=${sum.toFixed(6)} -> B${outputBlock}`);\n  }\n\n  private processSet(unit: any, note: Note, blocks: Map<number, Float32Array>, instrumentUnits: any[]): void {\n    const { param } = unit.params;\n    const paramValue = note[param.toLowerCase()] || 0;\n    const currentIndex = instrumentUnits.findIndex(u => u === unit);\n    for (let i = currentIndex + 1; i < instrumentUnits.length; i++) {\n      if (instrumentUnits[i].type === 'OSC') {\n        instrumentUnits[i].params.functionNum = Math.floor(paramValue) || instrumentUnits[i].params.functionNum;\n        console.log(`SET: Updated OSC functionNum to ${instrumentUnits[i].params.functionNum} from ${param}`);\n        break;\n      }\n    }\n  }\n\n  private processMlt(unit: any, note: Note, blocks: Map<number, Float32Array>): void {\n    const { input1, input2, outputBlock } = unit.params;\n    const input1Value = typeof input1 === 'string' ? (note[input1.toLowerCase()] || 0) : (blocks.get(input1)?.[0] || 0);\n    const input2Value = typeof input2 === 'string' ? (note[input2.toLowerCase()] || 0) : (blocks.get(input2)?.[0] || 0);\n    const product = input1Value * input2Value;\n    let output = blocks.get(outputBlock);\n    if (!output) {\n      output = new Float32Array(1);\n      blocks.set(outputBlock, output);\n    }\n    output[0] = product;\n    console.log(`MLT: In1=${input1Value.toFixed(6)}, In2=${input2Value.toFixed(6)}, Product=${product.toFixed(6)} -> B${outputBlock}`);\n  }\n\n  private processEnv(unit: any, note: Note, blocks: Map<number, Float32Array>, currentTime: number): void {\n    const { ampParam, durParam, outputBlock, functionNum, phaseParam } = unit.params;\n    const amplitude = ampParam.startsWith('B') ? (blocks.get(parseInt(ampParam.substring(1)))?.[0] || 0) : (note[ampParam.toLowerCase()] || note.amplitude || 0.5);\n    const duration = durParam.startsWith('P') ? (note[durParam.toLowerCase()] || note.duration || 1) : (blocks.get(parseInt(durParam.substring(1)))?.[0] || note.duration || 1);\n    const functionData = this.functions.get(functionNum) || this.functions.get(2)!;\n    let output = blocks.get(outputBlock);\n    if (!output) {\n      output = new Float32Array(1);\n      blocks.set(outputBlock, output);\n    }\n\n    if (!note.envState) {\n      const initialTime = phaseParam.startsWith('P') ? (note[phaseParam.toLowerCase()] || 0) : 0;\n      note.envState = { time: initialTime };\n    }\n\n    const elapsedTime = currentTime - note.startTime;\n    const t = Math.min(elapsedTime / duration, 1);\n    const index = Math.floor(t * (functionData.length - 1));\n    const value = functionData[index];\n    output[0] = value * amplitude;\n\n    if (currentTime < 0.01 || Math.random() < 0.01) {\n      console.log(`ENV at ${currentTime.toFixed(2)}s: Amp=${amplitude.toFixed(2)}, Dur=${duration.toFixed(2)}, T=${t.toFixed(2)}, Value=${value.toFixed(6)}, Out=B${outputBlock}=${output[0].toFixed(6)}`);\n    }\n  }\n\n  private generateSample(currentTime: number, blocks: Map<number, Float32Array>): number {\n    for (let i = 2; i <= 10; i++) {\n      const block = blocks.get(i);\n      if (block) block.fill(0);\n    }\n\n    for (const [noteNum, note] of this.activeNotes.entries()) {\n      const noteEndTime = note.startTime + note.duration;\n      if (currentTime >= note.startTime && currentTime <= noteEndTime) {\n        const instrument = note.instrument;\n        if (instrument && instrument.units) {\n          for (const unit of instrument.units) {\n            switch (unit.type) {\n              case 'OSC': this.processOscillator(unit, note, blocks, currentTime); break;\n              case 'OUT': this.processOutput(unit, blocks); break;\n              case 'AD2': this.processAd2(unit, note, blocks); break;\n              case 'SET': this.processSet(unit, note, blocks, instrument.units); break;\n              case 'MLT': this.processMlt(unit, note, blocks); break;\n              case 'ENV': this.processEnv(unit, note, blocks, currentTime); break;\n              case 'RAN': console.log('RAN: Not implemented'); break;\n              case 'STR': console.log('STR: Not implemented'); break;\n              case 'AD3': console.log('AD3: Not implemented'); break;\n              case 'AD4': console.log('AD4: Not implemented'); break;\n              case 'FLT': console.log('FLT: Not implemented'); break;\n              case 'RAH': console.log('RAH: Not implemented'); break;\n              case 'IOS': console.log('IOS: Not implemented'); break;\n            }\n          }\n        }\n      } else if (currentTime > noteEndTime) {\n        this.activeNotes.delete(noteNum);\n      }\n    }\n\n    const rawSample = blocks.get(1)?.[0] || 0;\n    const masterGain = 0.5;\n    const finalSample = rawSample * masterGain;\n\n    if (currentTime < 0.01 || Math.random() < 0.01) {\n      console.log(`Sample at ${currentTime.toFixed(2)}s: Raw=${rawSample.toFixed(6)}, Gain=${masterGain}, Final=${finalSample.toFixed(6)}`);\n    }\n\n    return finalSample;\n  }\n\n  async generateSound(duration: number = 8): Promise<Float32Array> {\n    try {\n      const numSamples = Math.floor(this.sampleRate * duration);\n      const outputBuffer = new Float32Array(numSamples);\n      this.currentTime = 0;\n      const blocks = new Map<number, Float32Array>([[1, new Float32Array(1)]]);\n      this.activeNotes.clear();\n      const eventsCopy = [...this.events];\n\n      for (let i = 0; i < numSamples; i++) {\n        const currentTimeInSeconds = i / this.sampleRate;\n\n        while (eventsCopy.length > 0 && eventsCopy[0].time <= currentTimeInSeconds) {\n          const event = eventsCopy.shift()!;\n          this.processEvent(event, currentTimeInSeconds);\n        }\n\n        outputBuffer[i] = this.generateSample(currentTimeInSeconds, blocks);\n        this.currentTime = currentTimeInSeconds;\n      }\n\n      return outputBuffer;\n    } catch (error: any) {\n      console.error('Error generating sound:', error);\n      this.consoleOutput += `Error generating sound: ${error.message}\\n`;\n      return new Float32Array(0);\n    }\n  }\n\n  private processEvent(event: Event, currentTime: number): void {\n    switch (event.type) {\n      case 'note':\n        const instrument = this.instruments.get(event.insNum!);\n        if (instrument) {\n          const noteNum = Date.now() + Math.random();\n          const instrumentCopy = JSON.parse(JSON.stringify(instrument));\n          this.activeNotes.set(noteNum, {\n            instrument: instrumentCopy,\n            startTime: currentTime,\n            duration: event.duration!,\n            frequency: event.frequency!,\n            amplitude: event.amplitude!,\n            p6: event.p6,\n            p7: event.p7,\n            p8: event.p8,\n            p29: event.p29,\n            p30: event.p30\n          });\n          console.log(`Note started: Instrument=${event.insNum}, Freq=${event.frequency}, Amp=${event.amplitude}`);\n        } else {\n          this.consoleOutput += `Error: Instrument ${event.insNum} not found\\n`;\n        }\n        break;\n      case 'sia':\n        this.globalVars.set(event.varNum!, event.value!);\n        if (event.varNum === 4) this.sampleRate = event.value!;\n        break;\n      case 'sv2':\n        // Handled in processPass2\n        break;\n      case 'termination':\n        this.activeNotes.clear();\n        break;\n    }\n  }\n\n  async initAudio(): Promise<void> {\n    if (!this.audioContext) {\n      try {\n        console.log('Initializing audio context...');\n        if (this.isServer) throw new Error('Cannot initialize audio in server environment');\n        this.audioContext = new AudioContext({ sampleRate: this.sampleRate, latencyHint: 'interactive' });\n        console.log('Audio context created with sample rate:', this.audioContext.sampleRate);\n\n        if (this.audioContext.state === 'suspended') {\n          console.log('Audio context is suspended, attempting to resume...');\n          await this.audioContext.resume();\n          console.log('Audio context resumed successfully');\n        }\n\n        const workletUrl = '/musicVWorklet.js';\n        console.log('Loading worklet from URL:', workletUrl);\n        try {\n          await this.audioContext.audioWorklet.addModule(workletUrl);\n          console.log('Worklet module loaded successfully!');\n        } catch (workletError: any) {\n          console.error('Failed to load worklet module:', workletError);\n          const fallbackUrl = './musicVWorklet.js';\n          console.log('Trying fallback URL:', fallbackUrl);\n          await this.audioContext.audioWorklet.addModule(fallbackUrl);\n          console.log('Worklet module loaded successfully from fallback URL!');\n        }\n\n        console.log('Creating AudioWorkletNode with processor name: music-v-processor');\n        this.workletNode = new AudioWorkletNode(this.audioContext, 'music-v-processor', {\n          numberOfInputs: 0,\n          numberOfOutputs: 1,\n          outputChannelCount: [1],\n          processorOptions: { sampleRate: this.sampleRate }\n        });\n\n        this.workletNode.connect(this.audioContext.destination);\n        console.log('AudioWorkletNode connected to destination');\n\n        this.workletNode.onprocessorerror = (error: ErrorEvent) => {\n          console.error('Worklet processor error:', error);\n          this.consoleOutput += `Audio processing error: ${error.message || 'Unknown error'}\\n`;\n        };\n\n        let terminationTime = 8.0;\n        const terEvent = this.events.find(e => e.type === 'termination');\n        if (terEvent) {\n          terminationTime = terEvent.time;\n          console.log(`Found termination time for init: ${terminationTime}s`);\n        }\n\n        console.log('Sending initialization data to worklet...');\n        this.workletNode.port.postMessage({\n          type: 'init',\n          events: this.events.map(e => ({ ...e })),\n          instruments: Object.fromEntries(this.instruments),\n          functions: Array.from(this.functions).reduce((obj, [key, value]) => {\n            obj[key] = Array.from(value);\n            return obj;\n          }, {} as Record<string, number[]>),\n          sampleRate: this.sampleRate,\n          terminationTime: terminationTime,\n          masterGain: 0.5\n        });\n\n        console.log('Initialization data sent to worklet');\n      } catch (error: any) {\n        console.error('Failed to initialize audio:', error);\n        this.consoleOutput += `Failed to initialize audio: ${error.message || 'Unknown error'}\\n`;\n        throw new Error(`Failed to initialize audio: ${error.message || 'Unknown error'}`);\n      }\n    } else if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume();\n      console.log('Existing audio context resumed');\n    }\n  }\n\n  async play(): Promise<void> {\n    try {\n      if (!this.audioContext) await this.initAudio();\n      if (!this.audioContext || !this.workletNode) throw new Error('Audio system not properly initialized');\n\n      if (this.audioContext.state === 'suspended') {\n        console.log('Resuming audio context for playback...');\n        await this.audioContext.resume();\n        console.log('Audio context resumed:', this.audioContext.state);\n      }\n\n      let terminationTime = 8.0;\n      const terEvent = this.events.find(e => e.type === 'termination');\n      if (terEvent) {\n        terminationTime = terEvent.time;\n        console.log(`Found termination time: ${terminationTime}s`);\n      }\n\n      console.log(`Sending ${this.events.length} events to worklet:`);\n      this.events.forEach((e, i) => {\n        console.log(`Event ${i}: ${e.type} at ${e.time}s: ${e.type === 'note' ? `ins=${e.insNum}, freq=${e.frequency}, amp=${e.amplitude}, dur=${e.duration}` : ''}`);\n      });\n\n      this.workletNode.port.postMessage({\n        type: 'play',\n        events: this.events.map(e => ({ ...e })),\n        currentTime: 0,\n        terminationTime: terminationTime\n      });\n\n      console.log('Play command sent to audio worklet');\n      this.consoleOutput += 'Audio playback started\\n';\n    } catch (error: any) {\n      console.error('Failed to start audio playback:', error);\n      this.consoleOutput += `Failed to start audio playback: ${error.message || 'Unknown error'}\\n`;\n      throw new Error(`Failed to start audio playback: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  stop(): void {\n    try {\n      if (this.audioContext) {\n        if (this.workletNode) {\n          this.workletNode.port.postMessage({ type: 'stop' });\n        }\n        this.audioContext.suspend();\n        console.log('Audio playback stopped');\n        this.consoleOutput += 'Audio playback stopped\\n';\n      }\n    } catch (error: any) {\n      console.error('Failed to stop audio playback:', error);\n      this.consoleOutput += `Failed to stop audio playback: ${error.message || 'Unknown error'}\\n`;\n    }\n  }\n\n  private handleGenFunction(functionNum: number, genType: number, normalization: number, params: number[]): void {\n    const functionData = new Float32Array(512);\n    if (genType === 0 || genType === 1) {\n      const points = [];\n      for (let i = 0; i < params.length; i += 2) {\n        const value = params[i] || 0;\n        const position = Math.floor(params[i + 1] || (i === params.length - 1 ? 511 : 0));\n        if (position >= 0 && position < 512) {\n          points.push({ position, value });\n          this.consoleOutput += `  Point: val=${value}, pos=${position}\\n`;\n        }\n      }\n\n      points.sort((a, b) => a.position - b.position);\n      if (points.length < 2) {\n        if (points.length === 0) {\n          points.push({ position: 0, value: 0 });\n          points.push({ position: 511, value: 0 });\n        } else {\n          points.push({ position: 511, value: points[0].value });\n        }\n      }\n\n      for (let i = 0; i < points.length - 1; i++) {\n        const startPoint = points[i];\n        const endPoint = points[i + 1];\n        const startPos = startPoint.position;\n        const endPos = endPoint.position;\n        const startVal = startPoint.value;\n        const endVal = endPoint.value;\n\n        for (let pos = startPos; pos <= endPos; pos++) {\n          const t = (endPos === startPos) ? 0 : (pos - startPos) / (endPos - startPos);\n          functionData[pos] = startVal * (1 - t) + endVal * t;\n        }\n      }\n\n      this.consoleOutput += `Function table ${functionNum} created with ${points.length} points\\n`;\n      console.log(`F${functionNum} sample values: [0]=${functionData[0]}, [50]=${functionData[50]}, [205]=${functionData[205]}, [306]=${functionData[306]}, [461]=${functionData[461]}, [511]=${functionData[511]}`);\n    } else {\n      for (let i = 0; i < 512; i++) {\n        functionData[i] = Math.sin(2 * Math.PI * i / 512);\n      }\n      this.consoleOutput += `Warning: GEN type ${genType} not supported, using sine wave\\n`;\n    }\n\n    if (normalization > 0) {\n      let minVal = Infinity;\n      let maxVal = -Infinity;\n      for (let i = 0; i < 512; i++) {\n        minVal = Math.min(minVal, functionData[i]);\n        maxVal = Math.max(maxVal, functionData[i]);\n      }\n\n      let normFactor = 1;\n      if (normalization === 1) normFactor = Math.max(Math.abs(minVal), Math.abs(maxVal));\n      else if (normalization === 2) normFactor = maxVal - minVal;\n\n      if (normFactor !== 0) {\n        for (let i = 0; i < 512; i++) {\n          if (normalization === 1) functionData[i] /= normFactor;\n          else if (normalization === 2) functionData[i] = (functionData[i] - minVal) / normFactor;\n        }\n      }\n    }\n\n    this.functions.set(functionNum, functionData);\n    console.log(`Created function table F${functionNum} with ${functionData.length} points`);\n  }\n\n  getConsoleOutput(): string {\n    return this.consoleOutput;\n  }\n\n  getFunctionTables(): FunctionTable[] {\n    return Array.from(this.functions.entries()).map(([functionNum, data]) => ({\n      functionNum,\n      data: Array.from(data)\n    }));\n  }\n}"],"names":["functionNum"],"mappings":"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"}