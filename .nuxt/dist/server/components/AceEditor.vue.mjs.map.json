{"file":"AceEditor.vue.mjs","mappings":";;;;;;;;;;;;;;;;;AAoBkB,QAAI,IAAI;AACpB,UAAA,kBAAkB,IAAI,IAAI;AACd,QAAI,IAAI;AACH,QAAI,IAAI;AAqGlB,aAAA;AAAA,MACX,aAAa,CAAC,SAAS;AAAA,MACvB,mBAAmB,CAAC,SAAS;AAAA,MAM7B;AAAA,MACA,WAAW,MAA2C;AAAA,MACtD,QAAQ,MAAM;AAAA,MACd,aAAa,MAAM;AAAA,IAAA,CACpB;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../components/AceEditor.vue"],"sourcesContent":["<template>\n  <div class=\"ace-editor-container\" ref=\"editorContainer\">\n    <div class=\"editor\" :class=\"{ 'editor': mode === 'editor', 'terminal': mode === 'terminal' }\" ref=\"editorRef\"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted, defineEmits, defineExpose } from 'vue';\nimport ace from 'ace-builds/src-noconflict/ace';\nimport 'ace-builds/src-noconflict/mode-python';\nimport 'ace-builds/src-noconflict/mode-text';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\nconst props = defineProps({\n  mode: { type: String, default: 'editor' },\n  value: { type: String, default: '' }\n});\n\nconst emit = defineEmits(['evaluate', 'evaluateTS', 'keydown', 'input']);\n\nconst editorRef = ref(null);\nconst editorContainer = ref(null);\nconst aceEditor = ref(null);\nconst resizeObserver = ref(null);\n\nconst defineMusicVMode = () => {\n  ace.define('ace/mode/musicv', ['require', 'exports', 'ace/lib/oop', 'ace/mode/text', 'ace/mode/musicv_highlight_rules'], (require, exports) => {\n    const oop = require('ace/lib/oop');\n    const TextMode = require('ace/mode/text').Mode;\n    const MusicVHighlightRules = require('ace/mode/musicv_highlight_rules').MusicVHighlightRules;\n\n    const Mode = function () { this.HighlightRules = MusicVHighlightRules; };\n    oop.inherits(Mode, TextMode);\n    Mode.prototype.lineCommentStart = 'COM ';\n    Mode.prototype.toggleCommentLines = function (state, session, startRow, endRow) {\n      const commentRegex = /^(?:\\s*)(?:COM |COMMENT |COMMENT: )/;\n      let uncomment = true;\n      for (let i = startRow; i <= endRow; i++) {\n        if (!commentRegex.test(session.getLine(i))) { uncomment = false; break; }\n      }\n      if (uncomment) {\n        for (let i = startRow; i <= endRow; i++) {\n          const line = session.getLine(i);\n          const m = line.match(commentRegex);\n          if (m) session.replace(new ace.Range(i, m.index, i, m[0].length), '');\n        }\n      } else {\n        session.indentRows(startRow, endRow, 'COM ');\n      }\n    };\n    exports.Mode = Mode;\n  });\n\n  ace.define('ace/mode/musicv_highlight_rules', ['require', 'exports', 'ace/lib/oop', 'ace/mode/text_highlight_rules'], (require, exports) => {\n    const oop = require('ace/lib/oop');\n    const TextHighlightRules = require('ace/mode/text_highlight_rules').TextHighlightRules;\n\n    const MusicVHighlightRules = function () {\n      this.$rules = {\n        start: [\n          { token: 'comment', regex: '^\\\\s*(?:COM|COMMENT|COMMENT:)\\\\s.*$' },\n          { token: 'keyword.gen', regex: '\\\\b(GEN)\\\\b' },\n          { token: 'keyword', regex: '\\\\b(INS|OSC|OUT|END|NOT|TER)\\\\b' },\n          { token: 'constant.numeric', regex: '\\\\b[0-9]+(?:\\\\.[0-9]+)?\\\\b' }\n        ]\n      };\n      this.normalizeRules();\n    };\n    oop.inherits(MusicVHighlightRules, TextHighlightRules);\n    exports.MusicVHighlightRules = MusicVHighlightRules;\n  });\n};\n\nonMounted(() => {\n  if (process.server) return;\n  console.log('Mounting AceEditor, ref:', editorRef.value); // Debug\n  if (!editorRef.value) {\n    console.error('Editor ref not found');\n    return;\n  }\n\n  defineMusicVMode();\n  aceEditor.value = ace.edit(editorRef.value, {\n    theme: 'ace/theme/monokai',\n    mode: props.mode === 'editor' ? 'ace/mode/musicv' : 'ace/mode/text',\n    fontSize: props.mode === 'terminal' ? 8 : 10,\n    showPrintMargin: false,\n    highlightActiveLine: props.mode === 'editor',\n    readOnly: props.mode === 'terminal',\n    showGutter: props.mode === 'editor',\n    wrap: true,\n    fontFamily: \"'Web437_IBM_MDA', monospace\",\n    value: props.value\n  });\n  console.log('Ace Editor initialized:', aceEditor.value); // Debug\n\n  if (props.mode === 'editor') {\n    aceEditor.value.commands.addCommand({\n      name: 'evaluateTS',\n      bindKey: { win: 'Alt-Enter', mac: 'Alt-Enter' },\n      exec: () => emit('evaluateTS', aceEditor.value.getValue())\n    });\n    aceEditor.value.commands.addCommand({\n      name: 'evaluateBinary',\n      bindKey: { win: 'Ctrl-Enter', mac: 'Ctrl-Enter' },\n      exec: () => emit('evaluate', aceEditor.value.getValue())\n    });\n    aceEditor.value.commands.removeCommand('gotoline');\n    aceEditor.value.commands.bindKey('ctrl-p', null);\n    aceEditor.value.container.addEventListener('keydown', (e) => emit('keydown', e));\n  }\n\n  aceEditor.value.on('change', () => emit('input', aceEditor.value.getValue()));\n\n  resizeObserver.value = new ResizeObserver(() => aceEditor.value?.resize());\n  if (editorContainer.value) resizeObserver.value.observe(editorContainer.value);\n});\n\nonUnmounted(() => {\n  if (process.server) return;\n  if (resizeObserver.value) resizeObserver.value.disconnect();\n  if (aceEditor.value) aceEditor.value.destroy();\n});\n\ndefineExpose({\n  addToEditor: (text) => !process.server && aceEditor.value?.setValue(text, -1),\n  addTerminalOutput: (text) => {\n    if (!process.server && props.mode === 'terminal' && aceEditor.value) {\n      const current = aceEditor.value.getValue();\n      aceEditor.value.setValue(current ? `${current}\\n${text}` : text);\n      aceEditor.value.navigateFileEnd();\n    }\n  },\n  aceEditor: () => (!process.server ? aceEditor.value : null),\n  resize: () => !process.server && aceEditor.value?.resize(),\n  clearEditor: () => !process.server && aceEditor.value?.setValue('')\n});\n</script>\n\n<style scoped>\n.ace-editor-container {\n  margin: 0;\n  padding: 0;\n\n  width: 100%;\n  height: 100%;\n  background: transparent;\n}\n\n.editor {\n  width: 100%;\n  height: 100%;\n  background: transparent;\n}\n\n:deep(.ace_editor) {\n  background: transparent !important;\n  font-family: 'Web437_IBM_MDA','IBM Plex mono' monospace;\n  font-size: 14px !important;\n  color: #ffffff !important;\n}\n\n:deep(.ace_editor.editor) {\n  font-size: 10px;\n}\n\n:deep(.ace_editor.terminal) {\n  background: #000000 !important;\n  font-size: 8px;\n}\n\n:deep(.ace_editor.terminal .ace_content),\n:deep(.ace_editor.terminal .ace_line) {\n  color: #ffb000 !important;\n  line-height: 1.9;\n  font-size: 9px !important;\n}\n\n:deep(.ace_editor .ace_gutter) {\n  background: transparent;\n  color: #555;\n}\n\n:deep(.ace_editor.terminal .ace_gutter) {\n  display: none;\n}\n</style>"],"version":3}